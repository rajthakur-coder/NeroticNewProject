

import { useState, useRef, useEffect, memo } from "react";
import { useLocation } from "react-router-dom";
import { sidebarSections } from "./sideData";
import SidebarItem from "./SidebarItem";
import SidebarSubmenu from "./SidebarSubmenu";
import Icon from "../../ui/Icon";
import clsx from "clsx";

// Types
type SidebarItemType = {
Â  name: string;
Â  path?: string;
Â  icon?: React.ReactNode;
Â  children?: SidebarItemType[];
};

type Position = { top: number; left: number; height: number };

type SidebarProps = {
Â  isCollapsed: boolean;
Â  setIsCollapsed: React.Dispatch<React.SetStateAction<boolean>>;
Â  isMobileOpen: boolean;
Â  setIsMobileOpen: React.Dispatch<React.SetStateAction<boolean>>;
Â  onItemClick?: () => void; // mobile close
};

const SidebarHeader = ({
Â  isCollapsed,
Â  toggleCollapse,
}: {
Â  isCollapsed: boolean;
Â  toggleCollapse: () => void;
}) => (
Â  <div className="relative flex items-center h-20 px-4 ">
Â  Â  <img
Â  Â  Â  src="https://www.vhv.rs/dpng/d/355-3553213_crm-dorm-room-fund-logo-transparent-hd-png.png"
Â  Â  Â  alt="Logo"
Â  Â  Â  className="w-10 h-10 ml-3 rounded-3xl"
Â  Â  />
Â  Â  Â {!isCollapsed && (
Â  Â  Â  <span className="ml-2 text-2xl font-bold">
Â  Â  Â  Â  {/* OFF: Uses primary color */}
Â  Â  Â  Â  <span className="text-primary">OFF</span>
Â  Â  Â  Â  {/* ICE: Uses text-subtle variable */}
Â  Â  Â  Â  <span className="text-text-subtle sidebar-header">ICE</span>
Â  Â  Â  </span>
Â  Â  )}

Â  Â  <button data-no-ripple
Â  Â  Â  aria-label={isCollapsed ? "Expand sidebar" : "Collapse sidebar"}
Â  Â  Â  onClick={toggleCollapse}
Â  Â  Â  className={clsx(
Â  Â  Â  Â  // Button colors replaced with variables
Â  Â  Â  Â  "absolute flex items-center justify-center w-6 h-6 rounded-full hover:bg-surface-hover",
Â  Â  Â  Â  "bg-surface-card text-text-subtle", 
Â  Â  Â  Â  
Â  Â  Â  Â  "transition-transform duration-300 transform hover:scale-110 active:scale-95 overflow-hidden -right-3 hidden lg:flex"
Â  Â  Â  )}
Â  Â  >
Â  Â  Â  <Icon
Â  Â  Â  Â  name={isCollapsed ? "bx:chevron-right" : "bx:chevron-left"}
Â  Â  Â  Â  size={16}
Â  Â  Â  />
Â  Â  </button>
Â  </div>
);

const MemoizedSidebarItem = memo(SidebarItem);

const Sidebar = ({
Â  isCollapsed,
Â  setIsCollapsed,
Â  isMobileOpen,
Â  onItemClick,
}: SidebarProps) => {
Â  const location = useLocation();
Â  const activePath = location.pathname;

Â  const [openManagementMenu, setOpenManagementMenu] = useState<string | null>(
Â  Â  null
Â  );
Â  const [hoveredManagementMenu, setHoveredManagementMenu] =
Â  Â  useState<SidebarItemType | null>(null);
Â  const [hoveredElementPos, setHoveredElementPos] = useState<Position>({
Â  Â  top: 0,
Â  Â  left: 0,
Â  Â  height: 0,
Â  });
Â  const [showScroll, setShowScroll] = useState(false);

Â  const scrollTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);
Â  const hoverTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);

Â  // Scroll detection
Â  useEffect(() => {
Â  Â  const sidebarEl = document.getElementById("sidebar-scroll");
Â  Â  if (!sidebarEl) return;

Â  Â  const handleScroll = () => {
Â  Â  Â  setShowScroll(true);
Â  Â  Â  if (scrollTimeoutRef.current) clearTimeout(scrollTimeoutRef.current);
Â  Â  Â  scrollTimeoutRef.current = setTimeout(() => setShowScroll(false), 800);
Â  Â  };

Â  Â  sidebarEl.addEventListener("scroll", handleScroll);
Â  Â  return () => sidebarEl.removeEventListener("scroll", handleScroll);
Â  }, []);

Â  const toggleManagementMenu = (name: string) => {
Â  Â  setOpenManagementMenu(openManagementMenu === name ? null : name);
Â  };

Â  // Hover handlers (desktop collapsed only)
Â  const handleHoverEnter = (e: React.MouseEvent, item: SidebarItemType) => {
Â  Â  if (isCollapsed && item.children) {
Â  Â  Â  if (hoverTimeoutRef.current) clearTimeout(hoverTimeoutRef.current);
Â  Â  Â  const rect = (e.currentTarget as HTMLElement).getBoundingClientRect();
Â  Â  Â  setHoveredElementPos({
Â  Â  Â  Â  top: rect.top,
Â  Â  Â  Â  left: rect.right + 8,
Â  Â  Â  Â  height: rect.height,
Â  Â  Â  });
Â  Â  Â  setHoveredManagementMenu(item);
Â  Â  }
Â  };

Â  const handleHoverLeave = () => {
Â  Â  if (isCollapsed) {
Â  Â  Â  hoverTimeoutRef.current = setTimeout(() => {
Â  Â  Â  Â  setHoveredManagementMenu(null);
Â  Â  Â  }, 300);
Â  Â  }
Â  };

Â  const handleItemClick = () => setHoveredManagementMenu(null);

Â  return (
Â  Â  <>
Â  Â  Â  <aside
Â  Â  Â  Â  className={clsx(
Â  Â  Â  Â  Â  "h-screen fixed top-0 left-0 transition-all duration-300 z-50",
Â  Â  Â  Â  Â  // Sidebar Background aur Border ke liye custom variables
Â  Â  Â  Â  Â  "bg-surface-card border-r border-border-primary", 
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  "w-64",
Â  Â  Â  Â  Â  isCollapsed ? "lg:w-24" : "lg:w-64",
"sidebar-dark",
Â  Â  Â  Â  Â  isMobileOpen
Â  Â  Â  Â  Â  Â  ? "translate-x-0"
Â  Â  Â  Â  Â  Â  : "-translate-x-full lg:translate-x-0"
Â  Â  Â  Â  )}
Â  Â  Â  >
Â  Â  Â  Â  <SidebarHeader
Â  Â  Â  Â  Â  isCollapsed={isCollapsed}
Â  Â  Â  Â  Â  toggleCollapse={() => setIsCollapsed(!isCollapsed)}
Â  Â  Â  Â  />

Â  Â  Â  Â  <nav
Â  Â  Â  Â  Â  id="sidebar-scroll"
Â  Â  Â  Â  Â  className={clsx(
Â  Â  Â  Â  Â  Â  "mt-1 flex flex-col overflow-y-auto  h-[calc(100vh-80px)] pb-8 sidebar-scroll",
Â  Â  Â  Â  Â  Â  isCollapsed
Â  Â  Â  Â  Â  Â  Â  ? "px-1 space-y-1 no-scrollbar"
Â  Â  Â  Â  Â  Â  Â  : "px-2 space-y-3 scrollbar-hidden",
Â  Â  Â  Â  Â  Â  showScroll && "show-scroll"
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  {sidebarSections.map((section, index) => (
Â  Â  Â  Â  Â  Â  <div key={index}>
Â  Â  Â  Â  Â  Â  Â  {!isCollapsed && (
Â  Â  Â  Â  Â  Â  Â  Â  // Standard JavaScript comment ka upyog kiya gaya hai taki JSX parser confuse na ho
Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="px-3 mb-2 text-xs font-semibold uppercase text-text-subtle">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {section.section}
Â  Â  Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  {section.items.map((item) => (
Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  key={item.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onMouseEnter={(e) => handleHoverEnter(e, item)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onMouseLeave={handleHoverLeave}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <MemoizedSidebarItem
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  item={item}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isCollapsed={isCollapsed}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isActive={
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  item.children
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? item.children.some((c) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  activePath.startsWith(c.path || "")
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : activePath.startsWith(item.path || "")
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  openManagementMenu={openManagementMenu}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  toggleManagementMenu={toggleManagementMenu}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onItemClick={onItemClick} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </nav>
Â  Â  Â  </aside>

Â  Â  Â  {/* Hovered submenu (desktop collapsed only) */}
Â  Â  Â  <SidebarSubmenu
Â  Â  Â  Â  hoveredElementPos={hoveredElementPos}
Â  Â  Â  Â  item={hoveredManagementMenu}
Â  Â  Â  Â  handleHoverLeave={handleHoverLeave}
Â  Â  Â  Â  handleItemClick={handleItemClick}
Â  Â  Â  Â  activePath={activePath}
Â  Â  Â  Â  isCollapsed={isCollapsed}
Â  Â  Â  Â  hoverTimeoutRef={hoverTimeoutRef}
Â  Â  Â  Â  onItemClick={onItemClick} // ðŸ‘ˆ pass to close sidebar in mobile
Â  Â  Â  />
Â  Â  </>
Â  );
};

export default Sidebar;