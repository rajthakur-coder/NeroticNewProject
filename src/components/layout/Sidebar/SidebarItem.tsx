import { useState } from "react";
import type { ReactNode } from "react";
import ProgressLink from "../../ui/ProgressLink";
import Icon from "../../ui/Icon";
// import { createRipple } from "../../../hooks/useRipple";
import clsx from "clsx";

interface SidebarChild {
Â  name: string;
Â  path: string;
}

interface SidebarItemProps {
Â  item: {
Â  Â  name: string;
Â  Â  path?: string;
Â  Â  icon: ReactNode;
Â  Â  children?: SidebarChild[];
Â  };
Â  isCollapsed: boolean;
Â  isActive: boolean;
Â  openManagementMenu?: string | null;
Â  toggleManagementMenu?: (name: string) => void;
Â  onItemClick?: () => void; // ðŸ‘ˆ mobile close
}

const SidebarItem = ({
Â  item,
Â  isCollapsed,
Â  isActive,
Â  openManagementMenu,
Â  toggleManagementMenu,
Â  onItemClick,
}: SidebarItemProps) => {
Â  const hasChildren = !!item.children?.length;
Â  const [activeChild, setActiveChild] = useState<string | null>(null);

Â  return (
Â  Â  <div className="relative w-full">
Â  Â  Â  {hasChildren ? (
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  onClick={() => toggleManagementMenu?.(item.name)}
Â  Â  Â  Â  Â  data-ripple
Â  Â  Â  Â  Â  className={clsx(
Â  Â  Â  Â  Â  Â  "sidebar-item transition-all duration-200",
Â  Â  Â  Â  Â  Â  isCollapsed
Â  Â  Â  Â  Â  Â  Â  ? "flex-col py-2 px-1 gap-1"
Â  Â  Â  Â  Â  Â  Â  : "flex-row px-4 py-3 gap-2 justify-between",
Â  Â  Â  Â  Â  Â  isActive
Â  Â  Â  Â  Â  Â  Â  ? "sidebar-item-active" // Custom active state class
Â  Â  Â  Â  Â  Â  Â  : "text-text-secondary hover:bg-surface-hover" // Default colors replaced
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  {/* Icon + Label */}
Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  className={clsx(
Â  Â  Â  Â  Â  Â  Â  "flex items-center",
Â  Â  Â  Â  Â  Â  Â  isCollapsed ? "flex-col gap-1" : "flex-row gap-2 flex-1"
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <span className="text-xl">{item.icon}</span>
Â  Â  Â  Â  Â  Â  {!isCollapsed && <span className="ml-1 text-sm">{item.name}</span>}
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Arrow */}
Â  Â  Â  Â  Â  <span
Â  Â  Â  Â  Â  Â  className={clsx(
Â  Â  Â  Â  Â  Â  Â  "absolute right-3 top-5 -translate-y-1/2 text-sm transition-transform duration-200",
Â  Â  Â  Â  Â  Â  Â  !isCollapsed && openManagementMenu === item.name && "rotate-180"
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <Icon
Â  Â  Â  Â  Â  Â  Â  name={isCollapsed ? "bx:chevron-right" : "bx:chevron-down"}
Â  Â  Â  Â  Â  Â  Â  size={16}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  </span>

Â  Â  Â  Â  Â  {/* Label under icon if collapsed */}
Â  Â  Â  Â  Â  {isCollapsed && <span className="text-[10px] mt-1">{item.name}</span>}
Â  Â  Â  Â  </button>
Â  Â  Â  ) : (
Â  Â  Â  Â  <ProgressLink
Â  Â  Â  Â  Â  to={item.path || "#"}
Â  Â  Â  Â  Â  data-ripple
Â  Â  Â  Â  Â  className={clsx(
Â  Â  Â  Â  Â  Â  "sidebar-item mt-1 transition-all duration-200",
Â  Â  Â  Â  Â  Â  isCollapsed
Â  Â  Â  Â  Â  Â  Â  ? "flex-col justify-center py-2 px-1 gap-1"
Â  Â  Â  Â  Â  Â  Â  : "flex-row px-4 py-3 gap-2",
Â  Â  Â  Â  Â  Â  isActive
Â  Â  Â  Â  Â  Â  Â  ? "sidebar-item-active" // Custom active state class
Â  Â  Â  Â  Â  Â  Â  : "text-text-secondary hover:bg-surface-hover" // Default colors replaced
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  setActiveChild(item.name);
Â  Â  Â  Â  Â  Â  onItemClick?.(); // ðŸ‘ˆ mobile close
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <span className="text-xl">{item.icon}</span>
Â  Â  Â  Â  Â  <span className={clsx(isCollapsed ? "text-[10px]" : "ml-1 text-sm")}>
Â  Â  Â  Â  Â  Â  {item.name}
Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  </ProgressLink>
Â  Â  Â  )}

Â  Â  Â  {/* Children (expanded only in desktop expanded mode) */}
Â  Â  Â  {hasChildren && !isCollapsed && (
Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  className={clsx(
Â  Â  Â  Â  Â  Â  "flex flex-col ml-10 mt-1 space-y-1 border-l-2 border-border-secondary overflow-hidden transition-all duration-300",
Â  Â  Â  Â  Â  Â  openManagementMenu === item.name ? "max-h-[500px]" : "max-h-0"
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  {item.children?.map((child) => (
      <div key={child.name} className="relative flex items-center">
        
<span
  className="absolute -left-[2px] w-3 h-2 border-l-2 border-b-2 border-border-secondary bg-surface-card z-10 rounded-bl-full"
></span>
Â  Â  
Â  Â  Â  Â 
 <ProgressLink
Â  Â  Â  Â  Â  Â  Â  key={child.name}
Â  Â  Â  Â  Â  Â  Â  to={child.path}
Â  Â  Â  Â  Â  Â  Â  className={clsx(
Â  Â  Â  Â  Â  Â  Â  Â  "sidebar-submenu-item ml-2.5 mt-1 relative flex items-center w-full overflow-hidden text-sm rounded-lg hover:bg-surface-hover",
Â  Â  Â  Â  Â  Â  Â  Â  // Default text color
Â  Â  Â  Â  Â  Â  Â  Â  "text-text-secondary", 
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  // Active state logic
Â  Â  Â  Â  Â  Â  Â  Â  activeChild === child.name ||
Â  Â  Â  Â  Â  Â  Â  Â  Â  window.location.pathname.startsWith(child.path)
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? "bg-surface-active sidebar-submenu-item-active" // Active background replaced
Â  Â  Â  Â  Â  Â  Â  Â  Â  : ""
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  setActiveChild(child.name);
Â  Â  Â  Â  Â  Â  Â  Â  onItemClick?.(); // ðŸ‘ˆ mobile close
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <span className="py-2 pl-4">{child.name}</span>
Â  Â  Â  Â  Â  Â  </ProgressLink>
      </div>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </div>
Â  Â  Â  )}


















{/* 
{hasChildren && !isCollapsed && (
  <div
    className={clsx(
      "relative flex flex-col ml-8 mt-2 pl-4 space-y-2 overflow-hidden transition-all duration-300",
      openManagementMenu === item.name ? "max-h-[500px]" : "max-h-0"
    )}
  >
    <span className="absolute left-1 top-0 bottom-0 w-[2px] bg-border-secondary rounded-full" />

    {item.children?.map((child, index) => (
      <div key={child.name} className="relative flex items-center">
        <span className="absolute -left-[7px] w-3 h-3 bg-surface-card border-2 border-border-secondary rounded-full z-10" />

        <ProgressLink
          to={child.path}
          className={clsx(
            "sidebar-submenu-item relative flex items-center w-full text-sm rounded-lg py-2 pl-4 transition-all duration-200 hover:bg-surface-hover",
            "text-text-secondary",
            activeChild === child.name ||
              window.location.pathname.startsWith(child.path)
              ? "bg-surface-active sidebar-submenu-item-active"
              : ""
          )}
          onClick={() => {
            setActiveChild(child.name);
            onItemClick?.();
          }}
        >
          {child.name}
        </ProgressLink>
      </div>
    ))}
  </div>
)}

 */}








Â  Â  </div>
Â  );
};

export default SidebarItem;